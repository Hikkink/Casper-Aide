plugins {
    id 'java'
    id 'application'
}

group 'soufix'
version '1.0.0'

application {
    mainClass = 'soufix.main.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// Javadoc configuration to fix encoding and HTML issues
tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('html5', true)
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src/resources']
            excludes = ['**/names.properties']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'redis.clients:jedis:5.1.2'
    implementation 'org.reflections:reflections:0.10.2'
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.3'

    // Date/time handling
    implementation 'joda-time:joda-time:2.12.7'

    // Expression parsing
    implementation 'org.scijava:jep:2.4.2'
}

jar {
    archiveFileName = "game.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                'Main-Class': 'soufix.main.Main',
                'Implementation-Version': archiveVersion,
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        )
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
                exclude '**/names.properties'
            }
        }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

task cleanLibs(type: Delete) {
    delete fileTree(dir: 'libs', include: '**/*.jar')
}

clean.dependsOn cleanLibs